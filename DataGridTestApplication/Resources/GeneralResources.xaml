<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:customControls="clr-namespace:BcWPFCustomControls.Controls;assembly=BcWPFCustomControls" 
    xmlns:converters="clr-namespace:BcWpfCommon.Converters;assembly=BcWpfCommon"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <converters:BoolToVisibleConverter x:Key="BoolToVisibleConverter" />
    <converters:StringToVisibleConverter x:Key="StringToVisibleConverter" />
    <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
    
    <Style TargetType="Control">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style TargetType="ContentControl">
        <Setter Property="IsTabStop" Value="False"></Setter>
    </Style>
    <Style TargetType="Label">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="DockPanel.Dock" Value="Left" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="HorizontalContentAlignment" Value="Right"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
    </Style>
    <Style TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style TargetType="CheckBox">
        <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style TargetType="customControls:TariffComboBox">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="MinWidth" Value="100" ></Setter>
    </Style>
    <Style TargetType="customControls:BossTextBox">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="MinWidth" Value="50"></Setter>
        <Setter Property="TextAlignment" Value="Left"></Setter>
        <Setter Property="PlaceholderTextWrapping" Value="NoWrap"></Setter>
        <Setter Property="WatermarkVerticalAlignment" Value="Center"></Setter>
    </Style>
    <Style TargetType="customControls:ReferenceComboBox">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="MinWidth" Value="50"></Setter>
        <Setter Property="WatermarkVerticalAlignment" Value="Center"></Setter>
    </Style>
    <Style TargetType="customControls:BossCustomUnitTextBox">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style TargetType="DatePicker">
        <Setter Property="IsTodayHighlighted" Value="True"></Setter>
    </Style>
    <Style TargetType="DockPanel">
        <Setter Property="LastChildFill" Value="True"/>
    </Style>
    <Style TargetType="Button">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="Background" Value="DarkBlue" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="IsTabStop" Value="False" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style TargetType="DataGridCell">
        <Setter Property="IsTabStop" Value="False"></Setter>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#E1EEFC" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="TextBox">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="#E1EEFC" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RequiredPanel" TargetType="StackPanel">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
    </Style>
    <Style x:Key="RequiredLabel" TargetType="Label">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="Red"/>
        <Setter Property="Padding" Value="2,5,0,0"/>
    </Style>
    <Style x:Key="ChinaInspectionQuarantinePopUpButton" TargetType="Button">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="Background" Value="#00B0F0" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="IsTabStop" Value="False" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TitleLabel" TargetType="Label">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
    <Style x:Key="SubtitleLabel" TargetType="Label">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
    <Style x:Key="SmallInput" TargetType="customControls:BossTextBox">
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="TextAlignment" Value="Left"></Setter>
        <Setter Property="PlaceholderTextWrapping" Value="NoWrap"></Setter>
        <Setter Property="WatermarkVerticalAlignment" Value="Center"></Setter>
    </Style>
    <Style x:Key="DescriptionInput" TargetType="customControls:BossTextBox">
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MaxWidth" Value="300" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style x:Key="CountryComboBox" TargetType="customControls:ReferenceComboBox">
        <Setter Property="AutoRefType" Value="TYPE_LocCountryCd" />
        <Setter Property="AutoRefFilter" Value="" />
        <Setter Property="CustomDescriptionFields" Value="LocalCountry|Description|LocalDescription|AdditionalCode"/>
        <Setter Property="DisplayMemberPath" Value="CustomDescription" />
        <Setter Property="CustomDescriptionSeparator" Value="-" />
        <Setter Property="SelectedValuePath" Value="Code" />
       <Setter Property="IsEditable" Value="True" />
        <Setter Property="SelectedValueMemberPath" Value="Description" />
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="WatermarkVerticalAlignment" Value="Center"></Setter>
    </Style>
    <Style x:Key="CurrencyComboBox" TargetType="customControls:ReferenceComboBox">
        <Setter Property="AutoRefType" Value="NONE" />
        <Setter Property="AutoRefFilter" Value="" />
        <Setter Property="CustomDescriptionFields" Value="LocalCurrencyCode|Code|Description"/>
        <Setter Property="DisplayMemberPath" Value="CustomDescription" />
        <Setter Property="CustomDescriptionSeparator" Value="-" />
        <Setter Property="SelectedValuePath" Value="Code" />
        <Setter Property="SelectedValueMemberPath" Value="Description" />
        <Setter Property="IsEditable" Value="True" />
        <Setter Property="WatermarkVerticalAlignment" Value="Center"></Setter>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style x:Key="CustomCurrencyComboBox" TargetType="customControls:ReferenceComboBox">
        <Setter Property="AutoRefType" Value="NONE" />
        <Setter Property="DisplayMemberPath" Value="CustomCurrencyDescription" />
        <Setter Property="SelectedValuePath" Value="Code" />
        <Setter Property="SelectedValueMemberPath" Value="Description" />
        <Setter Property="IsEditable" Value="True" />
        <Setter Property="WatermarkVerticalAlignment" Value="Center"></Setter>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style x:Key="CustomsUnitsComboBox" TargetType="customControls:ReferenceComboBox">
        <Setter Property="AutoRefType" Value="TYPE_CustomsUnits" />
        <Setter Property="AutoRefFilter" Value="" />
        <Setter Property="DisplayMemberPath" Value="CodeAndDescription" />
        <Setter Property="SelectedValuePath" Value="Code" />
        <Setter Property="IsEditable" Value="True" />
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="WatermarkVerticalAlignment" Value="Center"></Setter>
    </Style>
    <Style x:Key="GlobalPortCodes" TargetType="customControls:ReferenceComboBox">
        <Setter Property="AutoRefType" Value="TYPE_CustomCodeValues" />
        <Setter Property="AutoRefFilter" Value="GPC" />
        <Setter Property="CustomDescriptionFields" Value="Code|PrintValue" />
        <Setter Property="DisplayMemberPath" Value="CustomDescription" />
        <Setter Property="CustomDescriptionSeparator" Value="-" />
        <Setter Property="SelectedValuePath" Value="Code" />
        <Setter Property="SelectedValueMemberPath" Value="PrintValue" />
        <Setter Property="IsEditable" Value="True" />
        <Setter Property="WatermarkVerticalAlignment" Value="Center"></Setter>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style x:Key="BorderedLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="BorderThickness" Value="0.2" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Right"></Setter>
        <Setter Property="Padding" Value="10,5,20,10"></Setter>
    </Style>
    <Style x:Key="LeftGridHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Background" Value="#4994D6" />
        <Setter Property="Height" Value="24" />
    </Style>
    <Style x:Key="CombinedShipmentLabel" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="Red" />
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
    </Style>
    <Style x:Key="HideIfExport" TargetType="Grid">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Model.IsExportShipment}" Value="False">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Model.IsExportShipment}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
                            Margin="0" 
                            StrokeDashArray="1 2" 
                            Stroke="Black" 
                            SnapsToDevicePixels="true" 
                            StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle Fill="Transparent"
                                               Grid.ColumnSpan="2" />
                            <Ellipse
                                Grid.Column="0" x:Name="circle" 
                                Fill="#00008B" 
                                HorizontalAlignment="Center" 
                                Height="19" 
                                Stroke="Black" 
                                VerticalAlignment="Center" 
                                Width="19"/>
                            <Path
                                Grid.Column="0" x:Name="arrow" 
                                Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                HorizontalAlignment="Center" 
                                Stroke="White" 
                                SnapsToDevicePixels="false" 
                                StrokeThickness="2" 
                                VerticalAlignment="Center"/>
                            <ContentPresenter 
                                Grid.Column="1" 
                                HorizontalAlignment="Left" 
                                Margin="4,0,0,0" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse 
                                    x:Name="circle" 
                                    Fill="{StaticResource Expander.Static.Circle.Fill}" 
                                    HorizontalAlignment="Center" Height="19" 
                                    Stroke="{StaticResource Expander.Static.Circle.Stroke}" 
                                    VerticalAlignment="Center" 
                                    Width="19"/>
                                <Path 
                                    x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                    HorizontalAlignment="Center" 
                                    Stroke="{StaticResource Expander.Static.Arrow.Stroke}" 
                                    SnapsToDevicePixels="false" 
                                    StrokeThickness="2" 
                                    VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter 
                                HorizontalAlignment="Center" 
                                Margin="0,4,0,0" 
                                RecognizesAccessKey="True" 
                                Grid.Row="1" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter 
                                Property="Stroke" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter 
                                Property="Stroke" 
                                TargetName="arrow" 
                                Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter 
                                Property="Stroke" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter 
                                Property="StrokeThickness" 
                                TargetName="circle" 
                                Value="1.5"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter 
                                Property="Stroke" 
                                TargetName="arrow" 
                                Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter 
                                Property="Stroke" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter 
                                Property="Stroke" 
                                TargetName="arrow" 
                                Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse 
                                    x:Name="circle" 
                                    Fill="{StaticResource Expander.Static.Circle.Fill}" 
                                    HorizontalAlignment="Center" 
                                    Height="19" 
                                    Stroke="{StaticResource Expander.Static.Circle.Stroke}" 
                                    VerticalAlignment="Center" 
                                    Width="19"/>
                                <Path 
                                    x:Name="arrow" 
                                    Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                    HorizontalAlignment="Center" 
                                    Stroke="{StaticResource Expander.Static.Arrow.Stroke}" 
                                    SnapsToDevicePixels="false" 
                                    StrokeThickness="2" 
                                    VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter 
                                Grid.Column="1" 
                                HorizontalAlignment="Left" 
                                Margin="4,0,0,0" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter 
                                Property="Stroke" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter 
                                Property="Stroke" 
                                TargetName="arrow" 
                                Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter 
                                Property="Stroke" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter 
                                Property="StrokeThickness" 
                                TargetName="circle" 
                                Value="1.5"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter 
                                Property="Stroke" 
                                TargetName="arrow" 
                                Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter 
                                Property="Stroke" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter 
                                Property="Stroke" 
                                TargetName="arrow" 
                                Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse 
                                    x:Name="circle" 
                                    Fill="{StaticResource Expander.Static.Circle.Fill}" 
                                    HorizontalAlignment="Center" 
                                    Height="19" 
                                    Stroke="{StaticResource Expander.Static.Circle.Stroke}" 
                                    VerticalAlignment="Center" 
                                    Width="19"/>
                                <Path 
                                    x:Name="arrow" 
                                    Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                    HorizontalAlignment="Center" 
                                    Stroke="{StaticResource Expander.Static.Arrow.Stroke}" 
                                    SnapsToDevicePixels="false" 
                                    StrokeThickness="2" 
                                    VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter 
                                HorizontalAlignment="Center" 
                                Margin="0,4,0,0" 
                                RecognizesAccessKey="True" 
                                Grid.Row="1" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter 
                                Property="Stroke" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter 
                                Property="Stroke" 
                                TargetName="arrow" 
                                Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter 
                                Property="Stroke" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" 
                                    TargetName="circle" 
                                    Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter 
                                Property="Stroke" 
                                TargetName="arrow" 
                                Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter 
                                Property="Stroke" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="circle" 
                                Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter 
                                Property="Stroke" 
                                TargetName="arrow" 
                                Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0, 0, 0, 10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border 
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton 
                                x:Name="HeaderSite" 
                                ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                Content="{TemplateBinding Header}" 
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                DockPanel.Dock="Top" 
                                FontStretch="{TemplateBinding FontStretch}" 
                                Foreground="{TemplateBinding Foreground}" 
                                FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" 
                                FontStyle="{TemplateBinding FontStyle}" 
                                FontFamily="{TemplateBinding FontFamily}" 
                                FontWeight="{TemplateBinding FontWeight}" 
                                FontSize="{TemplateBinding FontSize}" 
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                IsChecked="{
                                    Binding IsExpanded, 
                                    Mode=TwoWay, 
                                    RelativeSource={RelativeSource Mode=TemplatedParent}}" 
                                Margin="1" 
                                MinWidth="0" 
                                MinHeight="0" 
                                Padding="{TemplateBinding Padding}" 
                                Style="{StaticResource ExpanderDownHeaderStyle}" 
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter 
                                x:Name="ExpandSite" 
                                DockPanel.Dock="Bottom" 
                                Focusable="false" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                Visibility="Collapsed"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter 
                                Property="Style" 
                                TargetName="HeaderSite" 
                                Value="{StaticResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter 
                                Property="Style" 
                                TargetName="HeaderSite" 
                                Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter 
                                Property="Style" 
                                TargetName="HeaderSite" 
                                Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter 
                                Property="Foreground" 
                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="InlineButton" TargetType="Button">
        <Setter Property="IsTabStop" Value="False"></Setter>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="Background" Value="DarkBlue" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Margin" Value="5, 0,0,0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>